program SpyRcv
{
  #include "spybot.h"
  #include "globals.h"


  event MessageEvent when message
  event VLLEvent when vll

  // Display 8 bit value on LEDs
  sub DebugOut(x)
  {
    // bits 0-5 on green & red LEDs, green is MSB
    led[iDisplay] =  (x & 0x17) | ((x & 8) * 4) | ((x & 32) / 4)
    led[iYellowWarn] = (x / 64) & 1  // bit 6 on yellow LED
    led[iVLL] =  (x / 128) & 1  // bit 7 on rear red LED
  }

  main
  {
    // Turn off annoying IR pinging
    ping[iInterval] = cDisablePings

    // Receive IR messages on channel 2
    link[iRxChannel] = iRCChannel2

    start MessageHandler
    start VLLHandler

    forever  {  wait 100  }
  }

  watcher MessageHandler monitor MessageEvent
  {
    select message[ iRxIR, iHiByte ] * 256 + message[ iRxIR, iLoByte ]
    {
       // RCX sent 0x9223 (controller red button)
       when 0x0200 { sound sndShocked Disp(ledSparkle) }
       // RCX sent 0x92ab
       when 0x0103 { sound sndHitByLaser Disp(ledAlarm) }
    }
  }

  watcher VLLHandler monitor VLLEvent
  {
    sound sndGotIt
    DebugOut(vll)  // display VLL code on LEDs
  }
}

/*
//For testing the above, here's some RCX MindScript code to alternately
//send two VLL codes (hook an LED up to output B).  The SpyBot will
//make a sound and display the received VLL code on the top LEDs.

program RCXVLL2Spy
{
  #include "s:\lego\include\rcx2\rcx2.h"
  #include "s:\lego\include\rcx2\rcx2vll.h"

  main
  {
    forever
    {
      on B wait 40
      ms_Rwd(B)  // VLL code 0000001
      off B

      wait 200

      on B wait 40
      ms_Beep3(B)  // VLL code 0000110
      off B

      wait 200
    }
  }
}
*/

//And finally, here's the RCX NQC code to send some IR commands
//(hook up 3 touch sensors to the RCX):

#define EVENT_1 0
#define EVENT_2 1
#define EVENT_3 2

/*
task main()
{
  SetSerialComm(SERIAL_COMM_4800|SERIAL_COMM_DUTY25|SERIAL_COMM_76KHZ);
  SetSerialPacket(SERIAL_PACKET_DEFAULT);

  SetSensor(SENSOR_1, SENSOR_TOUCH);
  SetSensor(SENSOR_2, SENSOR_TOUCH);
  SetSensor(SENSOR_3, SENSOR_TOUCH);

  SetEvent(EVENT_1, SENSOR_1, EVENT_TYPE_PRESSED);
  SetEvent(EVENT_2, SENSOR_2, EVENT_TYPE_PRESSED);
  SetEvent(EVENT_3, SENSOR_3, EVENT_TYPE_PRESSED);

  while (true)
  {
    monitor (EVENT_MASK(EVENT_1) + EVENT_MASK(EVENT_2) +
                  EVENT_MASK(EVENT_3))
    {
      Wait(100);
    }
    catch (EVENT_MASK(EVENT_1))
    {
      // Same as SpyBot controller red button (channel 2)
      SetSerialData(0,0x92);
      SetSerialData(1,0x23);
      SendSerial(0,2);
    }
    catch (EVENT_MASK(EVENT_2))
    {
      // Send "non-standard" SpyBot message (channel 2)
      SetSerialData(0,0x92);
      SetSerialData(1,0xab);
      SendSerial(0,2);
    }
    catch (EVENT_MASK(EVENT_3))
    {
      // Same as SpyBot controller left-forward button (channel 2)
      SetSerialData(0,0x60);
      SetSerialData(1,0x73);
      SendSerial(0,2);
    }
  }
}
*/
